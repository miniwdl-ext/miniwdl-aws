AWSTemplateFormatVersion: 2010-09-09

Description: >  
  provision AWS infrastructure for [miniwdl-aws](https://github.com/miniwdl-ext/miniwdl-aws) 
  -- including a VPC, EFS file system, Batch queues, and IAM roles.

Parameters:
  Owner:
    Description: Owner tag applied to all resources, e.g. your username/email
    Type: String

  Environment:
    Description: Environment tag applied to all resources, and used in some resource names
    Type: String
    Default: phenowdl

  S3UploadBucket:
    Description: S3 bucket name for automatic upload of workflow outputs with `miniwdl-aws-submit --s3upload`
    Type: String
    Default: phenowdl-bucket
    AllowedPattern: "((?=^.{3,63}$)(?!^(\\d+\\.)+\\d+$)(^(([a-z0-9]|[a-z0-9][a-z0-9\\-]*[a-z0-9])\\.)*([a-z0-9]|[a-z0-9][a-z0-9\\-]*[a-z0-9])$)|(^.{0}$))"
    ConstraintDescription: "Must respect AWS naming conventions"

  MaxVCPUTask:
    Description: Maximum vCPUs for task compute environment
    Type: Number
    Default: 256

  MaxVCPUWorkflow:
    Description: Maximum vCPUs for workflow compute environment
    Type: Number
    Default: 16

Resources:
#######################
# Networking
# borrowing from https://github.com/awslabs/genomics-secondary-analysis-using-aws-step-functions-and-aws-batch
#######################
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: !Sub ${Environment}-vpc
        - Key: Environment
          Value: !Sub ${Environment}
        - Key: Owner
          Value: !Sub ${Owner}

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${Environment}-igw
        - Key: Environment
          Value: !Sub ${Environment}
        - Key: Owner
          Value: !Sub ${Owner}

  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

# For simplicity, one public subnet per availability zone. Private subnet(s) with NAT could work.
  SubnetPublic0:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Select [ 0, !Cidr [ !GetAtt VPC.CidrBlock, 3, 13]]
      #MapPublicIpOnLaunch: true
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: ""
      Tags:
        - Key: Name
          Value: !Sub ${Environment}-Public-0
        - Key: Environment
          Value: !Sub ${Environment}
        - Key: Owner
          Value: !Sub ${Owner}

  SubnetPublic1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Select [ 1, !Cidr [ !GetAtt VPC.CidrBlock, 3, 13]]
      #MapPublicIpOnLaunch: true
      AvailabilityZone:
        Fn::Select:
          - 1
          - Fn::GetAZs: ""
      Tags:
        - Key: Name
          Value: !Sub ${Environment}-Public-1
        - Key: Environment
          Value: !Sub ${Environment}
        - Key: Owner
          Value: !Sub ${Owner}

  SubnetPublic2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Select [ 2, !Cidr [ !GetAtt VPC.CidrBlock, 3, 13]]
      #MapPublicIpOnLaunch: true
      AvailabilityZone:
        Fn::Select:
          - 2
          - Fn::GetAZs: ""
      Tags:
        - Key: Name
          Value: !Sub ${Environment}-Public-2
        - Key: Environment
          Value: !Sub ${Environment}
        - Key: Owner
          Value: !Sub ${Owner}

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${Environment}-rtb
        - Key: Environment
          Value: !Sub ${Environment}
        - Key: Owner
          Value: !Sub ${Owner}

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: VPCGatewayAttachment
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref PublicRouteTable
  SubnetPublic0RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref SubnetPublic0
  SubnetPublic1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref SubnetPublic1
  SubnetPublic2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref SubnetPublic2

  # Use a VPC Gateway Endpoint for S3 so that requests for data do not route over the public internet
  S3VpcEndpoint:
    Type: "AWS::EC2::VPCEndpoint"
    Properties:
      RouteTableIds:
        - !Ref PublicRouteTable
      ServiceName: !Sub com.amazonaws.${AWS::Region}.s3 #required
      VpcId: !Ref VPC #required

# Umbrella security group for Batch compute environments & EFS mount targets, allowing any traffic
# within the VPC and outbound (but not inbound) Internet. The ingress could be locked down to only
# make the EFS mount targets (TCP 2049) reachable from the Batch compute environments.
  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for AWS Batch Launched Instances.
      VpcId: !Ref VPC
      SecurityGroupEgress:
        - Description: Allow all outbound traffic for updates.
          IpProtocol: "-1"
          CidrIp: 0.0.0.0/0
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W40
            reason: Allow all outbound traffic for updates.
          - id: W5
            reason: Allow all outbound traffic for updates.
          - id: W42
            reason: Allow self-ingress on all ports for inter-node communication
  
  # this ingress rule is needed if you have tightly coupled multi-node workloads
  # or if you are using a parallel filesystem
  SecurityGroupSelfIngress:
    Type: "AWS::EC2::SecurityGroupIngress"
    Properties:
      Description: Allow instances in the same security group to communicate
      IpProtocol: "-1" #required
      GroupId: !Ref SecurityGroup
      SourceSecurityGroupId: !Ref SecurityGroup
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W42
            reason: Allow self-ingress on all ports for inter-node communication
#######################
# EFS
# borrowed from https://github.com/aws-samples/aws-genomics-workflows
#######################
  SharedDataFileSystem:
    Type: AWS::EFS::FileSystem
    Properties:
      PerformanceMode: maxIO #generalPurpose
      Encrypted: true
      FileSystemTags:
        - Key: Name
          Value: !Sub ${Environment}-efs
        - Key: Environment
          Value: !Sub ${Environment}
        - Key: Owner
          Value: !Sub ${Owner}

  MountTargetSubnet0:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref SharedDataFileSystem
      SubnetId: !Ref SubnetPublic0
      SecurityGroups: 
      - !Ref SecurityGroup
  MountTargetSubnet1:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref SharedDataFileSystem
      SubnetId: !Ref SubnetPublic1
      SecurityGroups: 
      - !Ref SecurityGroup
  MountTargetSubnet2:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref SharedDataFileSystem
      SubnetId: !Ref SubnetPublic2
      SecurityGroups: 
      - !Ref SecurityGroup

#######################
# IAM roles
#######################
# For Batch EC2 worker instances running WDL tasks
  IAMRoleTask:
    Type: "AWS::IAM::Role"
    Properties:
      Path: "/"
      RoleName: !Sub ${Environment}-task
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      MaxSessionDuration: 3600
      ManagedPolicyArns: 
      - "arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly"
      - "arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess"
      - "arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role"
      - "arn:aws:iam::aws:policy/AmazonElasticFileSystemClientReadWriteAccess"
      Tags: 
        - Key: Environment
          Value: !Sub ${Environment}
        - Key: Owner
          Value: !Sub ${Owner}
# For Batch Fargate tasks running miniwdl itself
# This role needs to be set with the Batch job definition, not as part of the compute environment;
# miniwdl-aws-submit detects it from the WorkflowEngineRoleArn tag on the workflow job queue, set
# above.
  IAMRoleWorkflow:
    Type: "AWS::IAM::Role"
    Properties:
      Path: "/"
      RoleName: !Sub ${Environment}-workflow
      AssumeRolePolicyDocument: 
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      MaxSessionDuration: 3600
      ManagedPolicyArns: 
      - "arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly"
      - "arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess"
      - "arn:aws:iam::aws:policy/AWSBatchFullAccess"
      - "arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy"
      - "arn:aws:iam::aws:policy/AmazonElasticFileSystemClientFullAccess"
      Tags: 
        - Key: Environment
          Value: !Sub ${Environment}
        - Key: Owner
          Value: !Sub ${Owner}
# workflow needs permissions for --s3upload, attach it as inline policy
  IAMPolicy:
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyDocument: 
        Version: '2012-10-17'
        Statement:
          - Action:
              - s3:ListBucket
            Effect: Allow
            Resource:
              - !Sub arn:aws:s3:::${S3UploadBucket}
          - Action:
              - s3:GetObject
              - s3:PutObject
            Effect: Allow
            Resource:
              - !Sub arn:aws:s3:::${S3UploadBucket}/*
      Roles: 
        - !Ref IAMRoleWorkflow
      PolicyName: !Sub "${IAMRoleWorkflow}-s3upload"

# Boilerplate roles
  IAMRoleBatch:
    Type: "AWS::IAM::Role"
    Properties:
      Path: "/"
      RoleName: !Sub ${Environment}-batch
      AssumeRolePolicyDocument: 
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - batch.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      MaxSessionDuration: 3600
      ManagedPolicyArns: 
      - "arn:aws:iam::aws:policy/service-role/AWSBatchServiceRole"
      Tags: 
        - Key: Environment
          Value: !Sub ${Environment}
        - Key: Owner
          Value: !Sub ${Owner}

  IAMRoleSpot:
    Type: "AWS::IAM::Role"
    Properties:
      Path: "/"
      RoleName: !Sub ${Environment}-spot
      AssumeRolePolicyDocument: 
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - spotfleet.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      MaxSessionDuration: 3600
      ManagedPolicyArns: 
      - "arn:aws:iam::aws:policy/service-role/AmazonEC2SpotFleetTaggingRole"
      Tags: 
        - Key: Environment
          Value: !Sub ${Environment}
        - Key: Owner
          Value: !Sub ${Owner}

# The following service-linked roles can be created only once per account; As oposite to TerraForm, 
# CloudFormation is Ok with trying to create it again as long as description stil the same 
  SpotSLR:
    Type: 'AWS::IAM::ServiceLinkedRole'
    Properties:
      AWSServiceName: spot.amazonaws.com
      Description: Default EC2 Spot Service Linked Role
  SpotFleeSLR:
    Type: 'AWS::IAM::ServiceLinkedRole'
    Properties:
      AWSServiceName: spotfleet.amazonaws.com
      Description: Default EC2 Spot Fleet Service Linked Role


Outputs:
  VpcId:
    Value: !Ref VPC
  PublicSubNetIds:
    Value: !Sub ${SubnetPublic0},${SubnetPublic1},${SubnetPublic0}
  InternetGatewayId:
    Value: !Ref InternetGateway
  SecurityGroupId:
    Value: !Sub ${SecurityGroup}
  EfsId:
    Value: !Ref SharedDataFileSystem
    Description: EFS ID