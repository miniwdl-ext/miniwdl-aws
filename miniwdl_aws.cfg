# miniwdl configuration file built into the miniwdl_aws Docker image. Additionally the environment
# variable MINIWDL__AWS__TASK_QUEUE must be set to the AWS Batch queue for WDL task execution, and
# MINIWDL__AWS__FSAP to the desired EFS Access Point.
#
# For info about where to place this file, and other available options:
#   https://miniwdl.readthedocs.io/en/latest/runner_reference.html#configuration

[scheduler]
container_backend = aws_batch_job
# One `miniwdl run` process will be able to orchestrate this many concurrent AWS Batch jobs. (This
# controls the size of a thread pool, so it should be kept to some reasonable value.)
call_concurrency = 100

[file_io]
# This must be set to the host's mount point for the EFS Access Point. The plugin will also
# configure AWS Batch jobs AWS Batch to mount the filesystem at this same location.
root = /mnt/efs

[task_runtime]
# Default policy to retry spot-terminated jobs (up to three total attempts)
defaults = {
        "docker": "ubuntu:20.04",
        "preemptible": 2
    }

[call_cache]
# Cache call outputs in EFS folder (valid so long as all referenced input & output files remain
# unmodified on EFS).
dir = /mnt/efs/miniwdl_run/_CACHE/call
get = true
put = true

[download_cache]
dir = /mnt/efs/miniwdl_run/_CACHE/download
get = false
put = false

[aws]
# Last-resort job timeout (seconds) for AWS Batch to enforce
job_timeout = 864000
# Internal rate limiting periods (seconds) for AWS Batch API requests
# (may need to be increased if many concurrent workflow runs are planned)
submit_period = 1
describe_period = 1
